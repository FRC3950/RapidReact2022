// Copyright (c) FIRST and other WPILib contributors. 

// Open Source Software; you can modify and/or share it under the terms of 

// the WPILib BSD license file in the root directory of this project. 

 
 // What gear do we start in? What is the gear ratio?
 // Try out curve drive

 //Try out 

package frc.robot.subsystems; 

 
 

import edu.wpi.first.wpilibj.DoubleSolenoid; 

import edu.wpi.first.wpilibj.PneumaticsModuleType; 

import edu.wpi.first.wpilibj.Timer; 

import edu.wpi.first.wpilibj.DoubleSolenoid.Value; 

import edu.wpi.first.wpilibj.drive.DifferentialDrive; 

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard; 

import edu.wpi.first.wpilibj2.command.SubsystemBase; 

import frc.robot.misc.Constants;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d; 

import edu.wpi.first.math.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.math.kinematics.DifferentialDriveWheelSpeeds;
import edu.wpi.first.math.util.Units; 

import edu.wpi.first.wpilibj.ADIS16470_IMU; 

 
 

import com.ctre.phoenix.motorcontrol.FeedbackDevice; 

import com.ctre.phoenix.motorcontrol.NeutralMode; 

import com.ctre.phoenix.motorcontrol.can.*; 

 
 

public class DrivetrainSubsystem extends SubsystemBase { 

 //Gear Ratio
 private final double kGearRatio = 15; //Gear ratio needed - must switch robot to correct gear
 

  //Left Motors 
  private final WPI_TalonFX leftM = new WPI_TalonFX(Constants.leftM); 
  private final WPI_TalonFX leftS = new WPI_TalonFX(Constants.leftS); 
   

  //Right Motors 
  private final WPI_TalonFX rightM = new WPI_TalonFX(Constants.rightM); 
  private final WPI_TalonFX rightS = new WPI_TalonFX(Constants.rightS); 


  //Robot's Drive 
  private final  DifferentialDrive m_drive = new DifferentialDrive(leftM, rightM); 


  //Gyro 
  private static final ADIS16470_IMU gyro = new ADIS16470_IMU(); 


  // Odometry class for tracking robot pose 
  private final DifferentialDriveOdometry m_odometry;   


  //Gear Shifter 
  private final DoubleSolenoid solenoid = new DoubleSolenoid(21, PneumaticsModuleType.REVPH, 1, 5); 


  //Subsytem's Timer 
  private final Timer time = new Timer(); 

 
  private double s, count; //Time (s) and encoder count 

  private double angle; 

  private boolean allowTurnInPlace = false;
 
 

  /** Creates a new DrivetrainSubsystem. */ 

  public DrivetrainSubsystem() { 

    // Curve Drive Turnable Test
    SmartDashboard.putBoolean("allowTurnInPlace", allowTurnInPlace);

    //Motors Coast/Break
    leftM.setNeutralMode(NeutralMode.Coast); 
    rightM.setNeutralMode(NeutralMode.Coast); 

 
    //Slave follows Master
    leftS.follow(leftM); 
    rightS.follow(rightM); 

    //Motors default sensor - Integrated
    leftM.configSelectedFeedbackSensor(FeedbackDevice.IntegratedSensor); 
    rightM.configSelectedFeedbackSensor(FeedbackDevice.IntegratedSensor); 

    //Zero two front drive encoders
    setEncoderCount(0); 

    //Calibrate gyro for auto
    gyro.calibrate(); 

    //Calibrates Position of robot for Auto
    m_odometry = new DifferentialDriveOdometry(Rotation2d.fromDegrees(gyro.getAngle())); //That was a nightmare to figure out :/ 

 
    ///////////////////////////////////////////////////////////////////////////////////////
    //Sets the gear to - low/high?????
    solenoid.set(Value.kForward); 

 
 

  } 

 
 

  @Override 

  public void periodic() { 

    s = getTime(); 


    //toggle true/false to get rid of smartDashboard INFO
    if(true){

      SmartDashboard.putNumber("Encoder Left: ", getLeftEncoderCount());
      SmartDashboard.putNumber("Encoder Right", getRightEncoderCount());
      SmartDashboard.putNumber("Average Encoder: ", getAverageEncoderCount());
      SmartDashboard.putNumber("Distance Traveled(M)", nativeUnitsToDistanceMeters(getAverageEncoderCount()));

      SmartDashboard.putNumber("Heading: ", getAngle());

      //Research how to put field and rotation pose on Dashboard!
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }

    // Update the odometry in the periodic block 
    m_odometry.update( 
    Rotation2d.fromDegrees(gyro.getAngle()), 
    nativeUnitsToDistanceMeters(getLeftEncoderCount()), 
    nativeUnitsToDistanceMeters(getRightEncoderCount())
    );  //encoder count needs to be in meters 

} 

/**
 * Returns the currently-estimated pose of the robot.
 * 
 * @return The pose.
 */
public Pose2d getPose(){
  return m_odometry.getPoseMeters();
}


/**
   * Returns the current wheel speeds of the robot.
   *
   * @return The current wheel speeds.
   */
  // public DifferentialDriveWheelSpeeds getWheelSpeeds() {
  //   return new DifferentialDriveWheelSpeeds(m_leftEncoder.getRate(), m_rightEncoder.getRate());
  // }


  // public double motorSpeed(){
  //   leftM.getSelectedSensorVelocity()*10
  // }
 
 

  public void toggleDriveGear(){ 

    if(solenoid.get() == Value.kReverse){ 
      solenoid.set(Value.kForward); 
    } 
    else if(solenoid.get() != Value.kReverse){ 
      solenoid.set(Value.kReverse); 
    } 
  } 

 
 

  public void shiftBack(){ 

    solenoid.set(Value.kReverse); 
  } 

 

  public void curveDrive(double x, double y){
    m_drive.curvatureDrive(x, y, allowTurnInPlace);
  }
 

  public void teleDrive(double x, double y){ 

    m_drive.arcadeDrive(x, -y); 

  } 

  public void linearDrive(double speed){ 

    m_drive.arcadeDrive(0, speed); 

  } 

  public void turn(double speed){ 

    m_drive.arcadeDrive(speed, 0); 

  } 

 
 
 

  public void setEncoderCount(double count){ 

    leftM.getSensorCollection().setIntegratedSensorPosition(count, 0); 

    rightM.getSensorCollection().setIntegratedSensorPosition(count, 0); 

 
 

     

  } 

  public double getAverageEncoderCount(){  

    return (leftM.getSelectedSensorPosition() + rightM.getSelectedSensorPosition() ) / 2.0; 

  } 

 
 

  public double getLeftEncoderCount(){ 

    return leftM.getSelectedSensorPosition(); 

  } 

 
 

  public double getRightEncoderCount(){ 

    return rightM.getSelectedSensorPosition(); 

  } 

   

 
 

  public double getAngle(){ 

    return gyro.getAngle(); 

  } 

  public void resetAngle(){ 

    gyro.reset(); 

  } 

 
 

  public double getTime(){ return time.get(); } 

  public void restartTime(){  

    time.reset();  

    time.start(); 

  } 

 
 

  private int distanceToNativeUnits(double positionMeters){ 

    double wheelRotations = positionMeters/(2 * Math.PI * Units.inchesToMeters(2)); 

    double motorRotations = wheelRotations * kGearRatio; 

    int sensorCounts = (int)(motorRotations * 2048); 

    return sensorCounts; 

  } 

 
 

  private int velocityToNativeUnits(double velocityMetersPerSecond){ 

    double wheelRotationsPerSecond = velocityMetersPerSecond/(2 * Math.PI * Units.inchesToMeters(2)); 

    double motorRotationsPerSecond = wheelRotationsPerSecond * kGearRatio; 

    double motorRotationsPer100ms = motorRotationsPerSecond / 10; 

    int sensorCountsPer100ms = (int)(motorRotationsPer100ms * 2048); 

    return sensorCountsPer100ms; 

  } 

  private double nativeUnitsToVelocity(double ticksPer100ms){ 

    double rotationPer100ms = ticksPer100ms / 2048;
    double rotationPerSec = rotationPer100ms * 10;
    double wheelRotPerSec = rotationPerSec / kGearRatio;
    double wheelVelocity = wheelRotPerSec * (2 * Math.PI * Units.inchesToMeters(2));

    return wheelVelocity;


  } 

 
 

  private double nativeUnitsToDistanceMeters(double sensorCounts){ 

    double motorRotations = (double)sensorCounts / 2048; 

    double wheelRotations = motorRotations / kGearRatio; 

    double positionMeters = wheelRotations * (2 * Math.PI * Units.inchesToMeters(2)); 

    return positionMeters; 

  } 

 
 

  //Josh was here 

} 

 
 

 